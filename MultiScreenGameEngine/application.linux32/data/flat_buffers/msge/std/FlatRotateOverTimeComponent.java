// automatically generated by the FlatBuffers compiler, do not modify

package msge.std;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class FlatRotateOverTimeComponent extends Table {
  public static FlatRotateOverTimeComponent getRootAsFlatRotateOverTimeComponent(ByteBuffer _bb) { return getRootAsFlatRotateOverTimeComponent(_bb, new FlatRotateOverTimeComponent()); }
  public static FlatRotateOverTimeComponent getRootAsFlatRotateOverTimeComponent(ByteBuffer _bb, FlatRotateOverTimeComponent obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__init(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public FlatRotateOverTimeComponent __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public float xRadiansPerMillisecond() { int o = __offset(4); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float yRadiansPerMillisecond() { int o = __offset(6); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float zRadiansPerMillisecond() { int o = __offset(8); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }

  public static int createFlatRotateOverTimeComponent(FlatBufferBuilder builder,
      float xRadiansPerMillisecond,
      float yRadiansPerMillisecond,
      float zRadiansPerMillisecond) {
    builder.startObject(3);
    FlatRotateOverTimeComponent.addZRadiansPerMillisecond(builder, zRadiansPerMillisecond);
    FlatRotateOverTimeComponent.addYRadiansPerMillisecond(builder, yRadiansPerMillisecond);
    FlatRotateOverTimeComponent.addXRadiansPerMillisecond(builder, xRadiansPerMillisecond);
    return FlatRotateOverTimeComponent.endFlatRotateOverTimeComponent(builder);
  }

  public static void startFlatRotateOverTimeComponent(FlatBufferBuilder builder) { builder.startObject(3); }
  public static void addXRadiansPerMillisecond(FlatBufferBuilder builder, float xRadiansPerMillisecond) { builder.addFloat(0, xRadiansPerMillisecond, 0.0f); }
  public static void addYRadiansPerMillisecond(FlatBufferBuilder builder, float yRadiansPerMillisecond) { builder.addFloat(1, yRadiansPerMillisecond, 0.0f); }
  public static void addZRadiansPerMillisecond(FlatBufferBuilder builder, float zRadiansPerMillisecond) { builder.addFloat(2, zRadiansPerMillisecond, 0.0f); }
  public static int endFlatRotateOverTimeComponent(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
};

