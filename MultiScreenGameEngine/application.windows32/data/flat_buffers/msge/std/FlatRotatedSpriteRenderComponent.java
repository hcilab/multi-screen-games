// automatically generated by the FlatBuffers compiler, do not modify

package msge.std;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class FlatRotatedSpriteRenderComponent extends Table {
  public static FlatRotatedSpriteRenderComponent getRootAsFlatRotatedSpriteRenderComponent(ByteBuffer _bb) { return getRootAsFlatRotatedSpriteRenderComponent(_bb, new FlatRotatedSpriteRenderComponent()); }
  public static FlatRotatedSpriteRenderComponent getRootAsFlatRotatedSpriteRenderComponent(ByteBuffer _bb, FlatRotatedSpriteRenderComponent obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__init(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public FlatRotatedSpriteRenderComponent __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public String spriteName() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer spriteNameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public float rotation() { int o = __offset(6); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }

  public static int createFlatRotatedSpriteRenderComponent(FlatBufferBuilder builder,
      int spriteNameOffset,
      float rotation) {
    builder.startObject(2);
    FlatRotatedSpriteRenderComponent.addRotation(builder, rotation);
    FlatRotatedSpriteRenderComponent.addSpriteName(builder, spriteNameOffset);
    return FlatRotatedSpriteRenderComponent.endFlatRotatedSpriteRenderComponent(builder);
  }

  public static void startFlatRotatedSpriteRenderComponent(FlatBufferBuilder builder) { builder.startObject(2); }
  public static void addSpriteName(FlatBufferBuilder builder, int spriteNameOffset) { builder.addOffset(0, spriteNameOffset, 0); }
  public static void addRotation(FlatBufferBuilder builder, float rotation) { builder.addFloat(1, rotation, 0.0f); }
  public static int endFlatRotatedSpriteRenderComponent(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
};

