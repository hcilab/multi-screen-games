// automatically generated by the FlatBuffers compiler, do not modify

package msge.std;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class FlatScaleOverTimeComponent extends Table {
  public static FlatScaleOverTimeComponent getRootAsFlatScaleOverTimeComponent(ByteBuffer _bb) { return getRootAsFlatScaleOverTimeComponent(_bb, new FlatScaleOverTimeComponent()); }
  public static FlatScaleOverTimeComponent getRootAsFlatScaleOverTimeComponent(ByteBuffer _bb, FlatScaleOverTimeComponent obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__init(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public FlatScaleOverTimeComponent __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public boolean xScalingUp() { int o = __offset(4); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public float xScalePerMillisecond() { int o = __offset(6); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float xLowerLimit() { int o = __offset(8); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float xUpperLimit() { int o = __offset(10); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public boolean yScalingUp() { int o = __offset(12); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public float yScalePerMillisecond() { int o = __offset(14); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float yLowerLimit() { int o = __offset(16); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float yUpperLimit() { int o = __offset(18); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public boolean zScalingUp() { int o = __offset(20); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public float zScalePerMillisecond() { int o = __offset(22); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float zLowerLimit() { int o = __offset(24); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float zUpperLimit() { int o = __offset(26); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }

  public static int createFlatScaleOverTimeComponent(FlatBufferBuilder builder,
      boolean xScalingUp,
      float xScalePerMillisecond,
      float xLowerLimit,
      float xUpperLimit,
      boolean yScalingUp,
      float yScalePerMillisecond,
      float yLowerLimit,
      float yUpperLimit,
      boolean zScalingUp,
      float zScalePerMillisecond,
      float zLowerLimit,
      float zUpperLimit) {
    builder.startObject(12);
    FlatScaleOverTimeComponent.addZUpperLimit(builder, zUpperLimit);
    FlatScaleOverTimeComponent.addZLowerLimit(builder, zLowerLimit);
    FlatScaleOverTimeComponent.addZScalePerMillisecond(builder, zScalePerMillisecond);
    FlatScaleOverTimeComponent.addYUpperLimit(builder, yUpperLimit);
    FlatScaleOverTimeComponent.addYLowerLimit(builder, yLowerLimit);
    FlatScaleOverTimeComponent.addYScalePerMillisecond(builder, yScalePerMillisecond);
    FlatScaleOverTimeComponent.addXUpperLimit(builder, xUpperLimit);
    FlatScaleOverTimeComponent.addXLowerLimit(builder, xLowerLimit);
    FlatScaleOverTimeComponent.addXScalePerMillisecond(builder, xScalePerMillisecond);
    FlatScaleOverTimeComponent.addZScalingUp(builder, zScalingUp);
    FlatScaleOverTimeComponent.addYScalingUp(builder, yScalingUp);
    FlatScaleOverTimeComponent.addXScalingUp(builder, xScalingUp);
    return FlatScaleOverTimeComponent.endFlatScaleOverTimeComponent(builder);
  }

  public static void startFlatScaleOverTimeComponent(FlatBufferBuilder builder) { builder.startObject(12); }
  public static void addXScalingUp(FlatBufferBuilder builder, boolean xScalingUp) { builder.addBoolean(0, xScalingUp, false); }
  public static void addXScalePerMillisecond(FlatBufferBuilder builder, float xScalePerMillisecond) { builder.addFloat(1, xScalePerMillisecond, 0.0f); }
  public static void addXLowerLimit(FlatBufferBuilder builder, float xLowerLimit) { builder.addFloat(2, xLowerLimit, 0.0f); }
  public static void addXUpperLimit(FlatBufferBuilder builder, float xUpperLimit) { builder.addFloat(3, xUpperLimit, 0.0f); }
  public static void addYScalingUp(FlatBufferBuilder builder, boolean yScalingUp) { builder.addBoolean(4, yScalingUp, false); }
  public static void addYScalePerMillisecond(FlatBufferBuilder builder, float yScalePerMillisecond) { builder.addFloat(5, yScalePerMillisecond, 0.0f); }
  public static void addYLowerLimit(FlatBufferBuilder builder, float yLowerLimit) { builder.addFloat(6, yLowerLimit, 0.0f); }
  public static void addYUpperLimit(FlatBufferBuilder builder, float yUpperLimit) { builder.addFloat(7, yUpperLimit, 0.0f); }
  public static void addZScalingUp(FlatBufferBuilder builder, boolean zScalingUp) { builder.addBoolean(8, zScalingUp, false); }
  public static void addZScalePerMillisecond(FlatBufferBuilder builder, float zScalePerMillisecond) { builder.addFloat(9, zScalePerMillisecond, 0.0f); }
  public static void addZLowerLimit(FlatBufferBuilder builder, float zLowerLimit) { builder.addFloat(10, zLowerLimit, 0.0f); }
  public static void addZUpperLimit(FlatBufferBuilder builder, float zUpperLimit) { builder.addFloat(11, zUpperLimit, 0.0f); }
  public static int endFlatScaleOverTimeComponent(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
};

